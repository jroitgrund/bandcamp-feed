buildscript {
    dependencies {
        classpath "org.xerial:sqlite-jdbc:${libs.versions.sqlite.get()}"
        classpath "gradle.plugin.org.flywaydb:gradle-plugin-publishing:${libs.versions.flyway.get()}"
    }
}

plugins {
    id 'nu.studer.jooq' version '6.0.1'
    id 'com.bmuschko.docker-java-application' version '7.1.0'
    id 'application'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.6.10'
}

apply plugin: "org.flywaydb.flyway"

application {
    mainClass = 'me.roitgrund.bandcampfeed.BandcampFeedServerKt'
}

def dbPath = rootProject.projectDir.toPath().toAbsolutePath()

flyway {
    url = "jdbc:sqlite:${dbPath}/db.sqlite"
}

dependencies {
    jooqGenerator "org.xerial:sqlite-jdbc:${libs.versions.sqlite.get()}"
}

jooq {
    version = "${libs.versions.jooq.get()}"

    configurations {
        main {
            generationTool {
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = url = "jdbc:sqlite:${dbPath}/db.sqlite"
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'me.roitgrund.bandcampfeed.sql'
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                    database {
                        excludes = 'flyway_schema_history'
                    }
                }
            }
        }
    }
}

dependencies {
    implementation libs.apache.commons.text
    implementation libs.flyway
    implementation libs.guava
    implementation libs.jackson.module.kotlin
    implementation libs.jsoup
    implementation libs.kotlin.stdlib
    implementation libs.ktor.auth
    implementation libs.ktor.client.cio
    implementation libs.ktor.client.core
    implementation libs.ktor.client.serialization
    implementation libs.ktor.core
    implementation libs.ktor.locations
    implementation libs.ktor.html.builder
    implementation libs.ktor.netty
    implementation libs.ktor.serialization
    implementation libs.ktor.server.sessions
    implementation libs.log4j.slf4j18.impl
    implementation libs.rome
    implementation libs.slf4j.api
    implementation libs.sqlite

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
}

test {
    useJUnitPlatform()
}

tasks.generateJooq.dependsOn flywayMigrate

docker {
    javaApplication {
        baseImage = 'openjdk:bullseye'
        images = ["jroitgrund/bandcamp-feed:${project.version}", "jroitgrund/bandcamp-feed:latest"]
        mainClassName = "me.roitgrund.bandcampfeed.BandcampFeedServerKt"
        ports = [8080]
    }
}

dockerCreateDockerfile {
    instruction 'RUN touch /app/db.sqlite'
}

